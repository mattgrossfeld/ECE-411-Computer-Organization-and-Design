import rv32i_types::*;

module fwd_logic(
    input rv32i_opcode opcode_id, //decoded opcode.
	 input rv32i_reg rs1_id, rs2_id, //Source regs of decoded instruction.
	 input rv32i_reg rs1_ex, rs2_ex, //source regs of instruction in ex stage
	 input rv32i_reg rd_ex, rd_mem, rd_wb, //destination regs from ex, mem, and wb stages
	 
);

logic [31:0] data;
logic [31:0] pc;

assign pc_out = pc;
assign funct3 = data[14:12];
assign funct7 = data[31:25];
assign opcode = rv32i_opcode'(data[6:0]);
assign i_imm = {{21{data[31]}}, data[30:20]};
assign s_imm = {{21{data[31]}}, data[30:25], data[11:7]};
assign b_imm = {{20{data[31]}}, data[7], data[30:25], data[11:8], 1'b0};
assign u_imm = {data[31:12], 12'h000};
assign j_imm = {{12{data[31]}}, data[19:12], data[20], data[30:21], 1'b0};
assign rs1 = data[19:15];
assign rs2 = data[24:20];
assign rd = data[11:7];

always_ff @(posedge clk)
begin
    if (clear)
		begin
        data <= 0;
		  pc <= pc_in;
		end
	 
	 else if (load) //Load will be mem_resp from instruction memory
		begin
			data <= read_data_in;
			pc <= pc_in;
		end
end


endmodule : if_id
